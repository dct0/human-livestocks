// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) // ! should ALWAYS be the discord id
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Session       Session[]

  members Member[] // a user has a member for each guild they are in
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Guild {
  id            String    @id @default(cuid())
  name          String
  members       Member[]
  lastCronnedAt DateTime? // last time cron job was run for this guild
}

model Member {
  id   String @id @default(cuid()) // * randomly generated
  user User   @relation(fields: [userId], references: [id])

  messages    Message[]
  stockPrices StockPrice[] // stores past and current stock price

  guild       Guild         @relation(fields: [guildId], references: [id])
  guildId     String
  impressions Impressions[]
  userId      String

  @@unique([guildId, userId])
  @@index([guildId, userId])
}

model Message {
  id          String        @id @default(cuid())
  content     String
  attachments String[]
  baseScore   Decimal
  impressions Impressions[]
  createdBy   Member        @relation(fields: [createdById], references: [id])
  createdById String

  guildId   String
  channelId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([guildId, channelId])
}

model Impressions {
  id            String         @id @default(cuid())
  type          ImpressionType
  discriminator String?
  score         Decimal
  message       Message        @relation(fields: [messageId], references: [id])
  messageId     String
  createdBy     Member         @relation(fields: [createdById], references: [id])
  createdById   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt // remove?
}

model StockPrice {
  id    String  @id @default(cuid())
  price Decimal

  member   Member @relation(fields: [memberId], references: [id])
  memberId String

  createdAt DateTime @default(now())

  @@index([memberId, createdAt(sort: Desc)])
}

enum ImpressionType {
  REACTION
}
